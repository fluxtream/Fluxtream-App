<% content_for :head do %>

<script type="text/javascript">
  var APP, PREFS, TOOLS, LOGIN, TAG_MANAGER, VIEWS, SOURCES;

  // If prototype is loaded, delete toJSON methods to prevent weirdness
  // with JSON.stringify()
  // http://stackoverflow.com/questions/710586/json-stringify-bizarreness
  if (window.Prototype) {
    delete Object.prototype.toJSON;
    delete Array.prototype.toJSON;
    delete Hash.prototype.toJSON;
    delete String.prototype.toJSON;
  }

  function render(src, data) {
    return jQuery.mustache(src.html(), data);
  }

  (function($) { 

    Path.map("#timeline").to(function() {
      $("#tabs ul li").removeClass("active");
      $("#tabs #tab-timeline").addClass("active");
      $(".tab-content").css("display", "none");
      $("#tab-timeline-content").css("display", "inline");
      TOOLS.resizeHandler();
    });
    Path.map("#timeline/views/:view_name").to(function() {
      var newvdata;
      $("#tabs ul li").removeClass("active");
      $("#tabs #tab-timeline").addClass("active");
      $(".tab-content").css("display", "none");
      $("#tab-timeline-content").css("display", "inline");
      _TIMELINE.loadView(this.params["view_name"]);
      TOOLS.resizeHandler();
    });
    Path.map("#timeline/views/:view_name/:min/:max").to(function() {
      var newvdata;
      $("#tabs ul li").removeClass("active");
      $("#tabs #tab-timeline").addClass("active");
      $(".tab-content").css("display", "none");
      $("#tab-timeline-content").css("display", "inline");
      _TIMELINE.loadViewWithTimeRange(this.params["view_name"], 
				      parseFloat(this.params["min"]), 
				      parseFloat(this.params["max"]));
      TOOLS.resizeHandler();
    });
    Path.map("#timeline/source/:source_name").to(function() {
      $("#tabs ul li").removeClass("active");
      $("#tabs #tab-timeline").addClass("active");
      $(".tab-content").css("display", "none");
      $("#tab-timeline-content").css("display", "inline");
      _TIMELINE.loadSource(this.params["source_name"]);
      TOOLS.resizeHandler();
    });
    Path.map("#views").to(function() {
      $("#tabs ul li").removeClass("active");
      $("#tabs #tab-views").addClass("active");
      $(".tab-content").css("display", "none");
      $("#tab-views-content").css("display", "inline");
      TOOLS.resizeHandler();
    });
    Path.map("#sources").to(function() {
      $("#tabs ul li").removeClass("active");
      $("#tabs #tab-sources").addClass("active");
      $(".tab-content").css("display", "none");
      $("#tab-sources-content").css("display", "inline");
      TOOLS.resizeHandler();
    });
    Path.map("#log").to(function() {
      $("#tabs ul li").removeClass("active");
      $("#tabs #tab-log").addClass("active");
      $(".tab-content").css("display", "none");
      $("#tab-log-content").css("display", "inline");
      TOOLS.resizeHandler();
    });
    Path.map("#settings").to(function() {
      $("#tabs ul li").removeClass("active");
      $("#tabs #tab-settings").addClass("active");
      $(".tab-content").css("display", "none");
      $("#tab-settings-content").css("display", "inline");
      TOOLS.resizeHandler();
    });

    // Default tab
    Path.root("#sources");

    APP = {
      init : function(callback) {

	// Wait for grapher to load before initializing tabs
	window.grapherLoad = function() {
	  console.log("dbg: grapher ready - \t" + typeof DateAxis);

	  LOGIN.getStatus(function(data) {
	    if (LOGIN.user_id > -1) {
	      VIEWS.getAvailableList(function() {

		$("#tab-timeline-content").html(render($("#tmpl-tab-timeline"), {}));
		$("#tab-views-content").html(render($("#tmpl-tab-views"), {
		  views : VIEWS.availableList
		}));
		TOOLS.onWindowResizeResizeElementHeight("#_views_pane");
		// resize called by TIMELINE.init

		$("#tab-sources-content").html(render($("#tmpl-tab-sources"), {}));
		$("#tab-log-content").html(render($("#tmpl-tab-log"), {}));
		$("#tab-settings-content").html(render($("#tmpl-tab-settings"), {}));

		// Reload views tab when VIEWS.save() is called
		VIEWS.onSaveListener(function() {
		  $("#tab-views-content").html(render($("#tmpl-tab-views"), {
		    views : VIEWS.availableList
		  }));
		});

		_SOURCES.loadSources(function() {
		  $("#_sources_add_btn").click(function(e) {
		    _SOURCES.discoverSources();
		    e.preventDefault();
		  });
		});

		// Call APP callback only after timeline is initialized
		_TIMELINE.init(callback);
	      }); // VIEWS.getAvailableList

              // Initialize the TAG_MANAGER
              TAG_MANAGER.init();
	    } 
	  }); // LOGIN.getStatus
	};
      }
    };

    PREFS = {
      __map : {},

      reset : function() {
        PREFS.__map = {};
      },

      get : function(keysStr, defaultVal) {
        if (typeof keysStr === 'string' && keysStr.length > 0) {
          var keys = keysStr.split(".");
          var o = PREFS.__map;
          for (var i=0;i<keys.length;i++) {
            var key = keys[i];
            if (typeof o[key] !== 'undefined') {
              o = o[key];
              if (i == (keys.length - 1)) {
                return o;
              }
            }
          }
        }
        return defaultVal;
      },

      set : function(keysStr, value) {
        if (typeof keysStr === 'string' && keysStr.length > 0 && typeof value !== 'undefined') {
          var keys = keysStr.split(".");
          var o = PREFS.__map;

          for (var i=0;i<keys.length;i++) {
            var key = keys[i];

            if (typeof o[key] !== 'object') {
              o[key] = {};
            }
            if (i == (keys.length - 1)) {
              o[key] = value;
              return true;
            } else {
              o = o[key];
            }
          }
        }
        return false;
      }
    };

    TOOLS = {
      resizeTimer : null,
      resizeCallbackList : [],
      resizeElements : [],

      // Add callback to list of resize callbacks
      onWindowResizeListener : function(callback) {
	TOOLS.resizeCallbackList.push(callback);
      },

      // Add element to resize on window resize
      onWindowResizeResizeElementHeight : function(el) {
	TOOLS.resizeElements.push(el);
      },

      // Resize handler used by window.onResize
      resizeHandler : function() {
	var i, l;
	var el;

	l = TOOLS.resizeCallbackList.length;
	for (i = 0; i < l; i++) {
	  TOOLS.resizeCallbackList[i]();
	}

	l = TOOLS.resizeElements.length;
	for (i = 0; i < l; i++) {
	  el = $(TOOLS.resizeElements[i]);
	  if (el.length > 0) {
	    TOOLS.resizeElementHeight(el);
	  }
	}
      },
      // http://stackoverflow.com/questions/33080/setting-the-height-of-a-div-dynamically
      resizeElementHeight : function(element) {
	var height = 0;
	var body = window.document.body;
	if (window.innerHeight) {
	  height = window.innerHeight;
	} else if (body.parentElement.clientHeight) {
	  height = body.parentElement.clientHeight;
	} else if (body && body.clientHeight) {
	  height = body.clientHeight;
	}
	element.height((height - element.offset().top - 5) + "px");
      },

      /**
       * Tries to parse the given intStr as an int.  Returns the parsed int or, if
       * parsing fails, returns the given defaultVal
       */
      parseInt : function(intStr, defaultVal) {
        var val = parseInt(intStr);
        if (isNaN(val)) {
          return defaultVal;
        }
        return val;
      },

      /**
       * Clones the given object by performing a deep copy.  This is apparently a very
       * efficient way to clone, according to one of the jQuery gurus.  See here for
       * more info:
       *
       * http://stackoverflow.com/questions/122102/what-is-the-most-efficient-way-to-clone-a-javascript-object
       */
      clone : function(obj) {
        return jQuery.extend(true, {}, obj);
      },

      // Check for unsaved changes to timeline and prompt user if needed
      checkForTimelineChanges : function() {
	var newvdata;
	if (VIEWS.data != "") {
	  _TIMELINE.updateViewData();
	  newvdata = JSON.stringify(VIEWS.data);
	  if (_TIMELINE.loadedViewStr != newvdata) {
	    _TIMELINE.hasUnsavedChanges = true;
	    return confirm("You have unsaved changes. Do you wish to continue?");
	  }
	}	
      },

      loadJson : function(url, urlParams, callbacks) {
        if (typeof url !== 'undefined') {

          if (!urlParams) {
            urlParams = {};
          }
          if (typeof callbacks === 'undefined') {
            callbacks = {};
          }
          var successCallback = callbacks['success'];
          var errorCallback = callbacks['error'];
          var completeCallback = callbacks['complete'];

          $.ajax({
                   cache    : false,
                   type     : "GET",
                   url      : url,
                   data     : urlParams,
                   success  : function(data, textStatus, jqXHR) {
                     try {
                       if (typeof successCallback === 'function') {
                         successCallback(typeof data === 'string' ? JSON.parse(data) : data);
                       }
                     }
                     catch (ex) {
                       console.log("_TIMELINE.loadJson.success: JSON parse error, or failure in the successCallback: " + ex);
                     }
                   },
                   error    : function(jqXHR, textStatus, errorThrown) {
                     try {
                       if (typeof errorCallback === 'function') {
                         errorCallback(textStatus, errorThrown);
                       }
                     }
                     catch (ex) {
                       console.log("_TIMELINE.loadJson.error: Failure in the errorCallback: " + ex);
                     }
                   },
                   complete : function(jqXHR, textStatus) {
                     try {
                       if (typeof completeCallback === 'function') {
                         completeCallback(textStatus);
                       }
                     }
                     catch (ex) {
                       console.log("_TIMELINE.loadJson.complete: Failure in the completeCallback: " + ex);
                     }
                   }
                 });
        }
      }
    };

    TAG_MANAGER = {
      tags : [], // array of tags--refresh this with TAG_MANAGER.refreshTagCache()

      refreshTagCache : function(successCallback) {

        var caseInsensitiveSort = function(tag1, tag2) {
          var a = tag1.toLowerCase();
          var b = tag2.toLowerCase();
          if (a < b) {
            return -1;
          }
          if (a > b) {
            return 1;
          }
          return 0;
        };

        TOOLS.loadJson("/users/" + LOGIN.user_id + "/tags",
                       {},
                       {
                         success : function(data, textStatus, jqXHR) {
                           try {
                             var jsonData = typeof data === 'string' ? JSON.parse(data) : data;
                             if (jQuery.isArray(jsonData)) {
                               TAG_MANAGER.tags = jsonData.sort(caseInsensitiveSort);
                             }

                             if (typeof successCallback === 'function') {
                               successCallback();
                             }
                           }
                           catch (ex) {
                             console.log("TAG_MANAGER.refreshTagCache.success: Failed to parse tag array:" + ex);
                           }
                         },
                         error   : function(jqXHR, textStatus, errorThrown) {
                           console.log("TAG_MANAGER.refreshTagCache.error: Failed to fetch tags:" + errorThrown);
                         }
                       }
        );
      },

      // Returns the cached tags in the format required by the tag editor plugin
      getCachedTagsForTagEditor : function(tagsToExclude) {
        if (!jQuery.isArray(tagsToExclude)) {
          tagsToExclude = [];
        }

        // dump the items in tagsToExclude into a hash map
        var excludedTags = {};
        jQuery.each(tagsToExclude,
                    function(index,val) {
                      excludedTags[val] = 1;
                    });

        var cachedTagsData = new Array();
        if (TAG_MANAGER.tags.length > 0) {
          jQuery.each(TAG_MANAGER.tags,
                      function(index, val) {
                        // only include tags which aren't in the exclusion list
                        if (typeof excludedTags[val] === 'undefined') {
                          cachedTagsData[cachedTagsData.length] = {
                            "id"    : "_tag_" + index,
                            "label" : val,
                            "value" : val
                          };
                        }
                      });
        }
        return cachedTagsData.sort();
      },

      init : function() {
        TAG_MANAGER.refreshTagCache();
      }
    };

    LOGIN = {
      name    : "",
      user_id : -1,
      login   : "",

      // populate login data fields
      getStatus : function(callback) {
	$.ajax({
	  cache   : false,
	  type    : "GET",
	  url     : "/login_status.json",
	  success : function(data, textStatus, jqXHR) {
	    if ((typeof data !== "undefined") &&
		(typeof data["user_id"] !== "undefined")) {
	      LOGIN.user_id = data["user_id"];
	      LOGIN.name    = data["name"];
	      LOGIN.login   = data["login"];
	    }
	    if (typeof callback === "function") {
	      callback(data);
	    }
	  }
	});
      }
    }; // LOGIN

    VIEWS = {
      data : "",
      availableList : [],
      saveCallbackList : [],

      getAvailableList : function(callback) {
	$.ajax({
	  cache   : false,
	  type    : "GET",
	  url     : "/users/" + LOGIN.user_id + "/views",
	  success : function(data, textStatus, jqXHR) {
	    VIEWS.availableList = data.views;
	    if (typeof callback === "function") {
	      callback(data.views);
	    }
	  },
	  error   : function(jqXHR, textStatus, errorThrown) {
	    VIEWS.availableList = []
	  }
	});
      },

      // Set view data
      load : function(name, callback) {
	console.log("dbg: VIEWS.load - \t" + typeof DateAxis);
	$.ajax({
	  cache   : false,
	  type    : "GET",
	  url     : "/users/" + LOGIN.user_id + "/views/get",
	  data    : { "name" : name },
	  success : function(data, textStatus, jqXHR) {
	    console.log("dbg: VIEWS.load success - \t" + typeof DateAxis);
	    VIEWS.data = data;
	    if (typeof callback === "function") {
	      callback(data);
	    }
	  }
	});
      },

      // Update view data
      // callback returns same response as VIEWS.getAvailableList()
      save : function(name, callback) {
	// Update view data before saving with new name
	VIEWS.data["name"] = name;

	$.ajax({
	  cache   : false,
	  type    : "POST",
	  url     : "/users/" + LOGIN.user_id + "/views/set",
	  data    : {
	    "name" : name,
	    "data" : JSON.stringify(VIEWS.data)
	  },
	  success : function(data, textStatus, jqXHR) {
	    var i, l;

	    VIEWS.availableList = data.views;

	    l = VIEWS.saveCallbackList.length;
	    for (i = 0; i < l; i++) {
	      VIEWS.saveCallbackList[i]();
	    }
	    if (typeof callback === "function") {
	      callback(data.views);
	    }
	  }
	});
      },

      // Add callback to list of onSave callbacks
      onSaveListener : function(callback) {
	VIEWS.saveCallbackList.push(callback);
      }
    }; // VIEWS

    SOURCES = {
      availableList  : [],
      configuredList : [],
      discoveryList  : [],

      getAvailableList : function(callback) {
	$.ajax({
	  cache   : false,
	  type    : "GET",
	  url     : "/users/" + LOGIN.user_id + "/sources/list",
	  success : function(data, textStatus, jqXHR) {
	    SOURCES.availableList = data.sources;

	    if (typeof callback === "function") {
	      callback(data.sources);
	    }
	  },
	  error   : function(jqXHR, textStatus, errorThrown) {
	    SOURCES.availableList = []
	  }
	});
      },
      getConfiguredList : function(callback) {
	$.ajax({
	  cache   : false,
	  type    : "GET",
	  url     : "/users/" + LOGIN.user_id + "/sources",
	  success : function(data, textStatus, jqXHR) {
	    SOURCES.configuredList = data.sources;

	    if (typeof callback === "function") {
	      callback(data.sources);
	    }
	  },
	  error   : function(jqXHR, textStatus, errorThrown) {
	    SOURCES.configuredList = []
	  }
	});
      },
      getDiscoveryList : function(callback) {
	$.ajax({
	  cache   : false,
	  type    : "GET",
	  url     : "/users/" + LOGIN.user_id + "/sources/discovery",
	  success : function(data, textStatus, jqXHR) {
	    SOURCES.discoveryList = data.sources;

	    if (typeof callback === "function") {
	      callback(data.sources);
	    }
	  },
	  error   : function(jqXHR, textStatus, errorThrown) {
	    SOURCES.discoveryList = []
	  }
	});
      },
      getDefaultGraphSpecs : function(device_name, callback) {
	$.ajax({
	  cache   : false,
	  type    : "GET",
	  url     : "/users/" + LOGIN.user_id + "/sources/default_graph_specs",
	  data    : { "name" : device_name },
	  success : function(data, textStatus, jqXHR) {
	    if (typeof callback === "function") {
	      callback(data.info);
	    }
	  },
	  error   : function(jqXHR, textStatus, errorThrown) {
	  }
	});
      }
    }; // SOURCES
  }(jQuery));

  jQuery(function($) {
    APP.init(function() {
      // Initialize resize handler
      $(window).resize(function() {
	clearTimeout(TOOLS.resizeTimer);
	TOOLS.resizeTimer = setTimeout(TOOLS.resizeHandler, 100);
      });

      // Enable hash path handler
      Path.listen();
    });
  });
</script>

<style>
  .tab-content {
    display: none;
  }
  #wrapper {
    border-top: 3px solid #aaa;
    padding-top: 15px;
  }
</style>

<% end %>

<%= render "timeline" %>
<%= render "views" %>
<%= render "sources" %>
<%= render "log" %>
<%= render "settings" %>

<div id="wrapper"></div>
<div class="tab-content" id="tab-timeline-content"></div>
<div class="tab-content" id="tab-views-content"></div>
<div class="tab-content" id="tab-sources-content"></div>
<div class="tab-content" id="tab-log-content"></div>
<div class="tab-content" id="tab-settings-content"></div>
